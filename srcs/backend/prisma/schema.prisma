generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userID              String      @id @default(cuid())
    userNumber          Int         @unique @default(autoincrement())
    profile             Profile?
    auth                Auth?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model Auth {
    authID              String      @id @default(cuid())
    user                User        @relation(fields: [authID], references: [userID])
    accessToken         String      @unique @default("")
    refreshToken        String      @unique @default("")
    bearerToken         String      @unique @default("")
}

model Profile {
    userID              String      @id @default(cuid())
    user                User        @relation(fields: [userID], references: [userID])
    login42             String      @unique
    username            String      @unique
    userStatus          userStatus   @default(online)
    imagePath           String      @default("default_path")
    authentificator     Boolean     @default(false)
    apiToken            Json?
    achievement         Achievement?
    rightGame           Game[]      @relation(name: "rightPlayer")
    leftGame            Game[]      @relation(name: "leftPlayer")
    friendReqSent       Friend[]    @relation(name: "sent")
    friendReqRece       Friend[]    @relation(name: "received")
    blocked             Block[]     @relation(name: "blocker")
    blockedBy           Block[]     @relation(name: "blocked")
    channelOwned        Channel[]   @relation(name: "owner")
    channels            Channel[]
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model Achievement{
    userID              String      @id @default(cuid())
    profile             Profile     @relation(fields: [userID], references: [userID])
    achiev1             Boolean     @default(false)
    achiev2             Boolean     @default(false)
    achiev3             Boolean     @default(false)
    achiev4             Boolean     @default(false)
}

model Game{
    gameID              String      @id @default(cuid())
    leftPlayer          Profile     @relation(name: "leftPlayer", fields: [leftPlayerID], references: [userID])
    leftPlayerID        String
    leftPlayerScore     Int         @default(0)
    rightPlayer         Profile     @relation(name: "rightPlayer", fields: [rightPlayerID], references: [userID])
    rightPlayerID       String
    rightPlayerScore    Int         @default(0)
    active              Boolean     @default(true)
    winner              String      @default("Undefined")
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model Friend{
    friendID            String      @id @default(cuid())
    senderProfile       Profile     @relation(name: "sent", fields: [senderID], references: [userID])
    senderID            String
    receiverProfile     Profile     @relation(name: "received" ,fields: [receiverID], references: [userID])
    receiverID          String
    requestStatus       reqStatus   @default(pending)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model Block{
    blockID             String      @id @default(cuid())
    blockerProfile      Profile     @relation(name: "blocker", fields: [blockerID], references: [userID])
    blockerID           String
    blockedProfile      Profile     @relation(name: "blocked", fields: [blockedID], references: [userID])
    blockedID           String
    reason              String      @default("None")
    requestStatus       reqStatus   @default(pending)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model Channel{
    channelID           String      @id @default(cuid())
    Name                String      @unique @default("Name not initialised")
    private             Boolean     @default(false)
    password            String
    owner               Profile     @relation(name: "owner", fields: [ownerID], references: [userID])
    ownerID             String
    users               Profile[]
    admin               Boolean     @default(false)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}



enum userStatus{
    online
    offfline
    playing
}

enum reqStatus{
    pending
    accepted
    declined
}
